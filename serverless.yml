# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cognito-dynamodb-sample

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs6.10
  environment:
    COGNITO_IDENTITY_POOL_NAME: cognito_dynamodb_sample_${opt:stage, self:provider.stage}
    USER_DATA_TABLE: cognito-dynamodb-sample-${opt:stage, self:provider.stage}
    USER_DATA_INDEX_USERID_PARAM1: userId-param1
    USER_DATA_INDEX_USERID_PARAM2: userId-param2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_DATA_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_DATA_TABLE}/*"

#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

  hello-via-apig:
    handler: handler.hello
    events:
      - http:
           path: hello
           method: get
           cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    UserDataDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: userDataId
            AttributeType: S
          -
            AttributeName: param1
            AttributeType: S
          -
            AttributeName: param2
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: userDataId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        TableName: "${self:provider.environment.USER_DATA_TABLE}"

        LocalSecondaryIndexes:
          -
            IndexName: "${self:provider.environment.USER_DATA_INDEX_USERID_PARAM1}"
            KeySchema:
              -
                AttributeName: "userId"
                KeyType: "HASH"
              -
                AttributeName: "param1"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
        GlobalSecondaryIndexes:
          -
            IndexName: "${self:provider.environment.USER_DATA_INDEX_USERID_PARAM2}"
            KeySchema:
              -
                AttributeName: "userId"
                KeyType: "HASH"
              -
                AttributeName: "param2"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: "3"
              WriteCapacityUnits: "3"


    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: "${self:provider.environment.COGNITO_IDENTITY_POOL_NAME}"
        AllowUnauthenticatedIdentities: true
        OpenIdConnectProviderARNs:
          - Fn::Join:
            - ":"
            - - arn
              - aws
              - "iam"
              - ""
              - Ref: AWS::AccountId
              - "oidc-provider/accounts.google.com"

    UnauthenticatedPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            Resource:
            - "*"
          - Effect: Allow
            Action: "execute-api:Invoke"
            Resource:
              Fn::Join:
                - ":"
                - - arn
                  - aws
                  - execute-api
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - "*/${opt:stage, self:provider.stage}/*/*"
    UnauthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
        ManagedPolicyArns:
        - Ref: UnauthenticatedPolicy
    AuthenticatedPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Resource:
            - "*"
          - Effect: Allow
            Action: "execute-api:Invoke"
            Resource:
              Fn::Join:
                - ":"
                - - arn
                  - aws
                  - execute-api
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - "*/${opt:stage, self:provider.stage}/*/*"
    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
        ManagedPolicyArns:
        - Ref: AuthenticatedPolicy
    RoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          unauthenticated:
            Fn::GetAtt:
            - UnauthenticatedRole
            - Arn
          authenticated:
            Fn::GetAtt:
            - AuthenticatedRole
            - Arn


#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
